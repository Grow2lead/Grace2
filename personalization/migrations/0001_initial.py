# Generated by Django 5.2.5 on 2025-08-09 07:05

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PersonalizationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable_meal_reminders', models.BooleanField(default=True)),
                ('enable_activity_reminders', models.BooleanField(default=True)),
                ('enable_goal_notifications', models.BooleanField(default=True)),
                ('enable_weekly_summaries', models.BooleanField(default=True)),
                ('show_meal_recommendations', models.BooleanField(default=True)),
                ('show_activity_recommendations', models.BooleanField(default=True)),
                ('recommendation_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('disabled', 'Disabled')], default='daily', max_length=20)),
                ('preferred_units', models.CharField(choices=[('metric', 'Metric (kg, cm)'), ('imperial', 'Imperial (lbs, inches)')], default='metric', max_length=10)),
                ('dashboard_layout', models.JSONField(default=dict, help_text='Dashboard widget preferences')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personalization_settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecommendationEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('meal', 'Meal Recommendation'), ('activity', 'Activity Recommendation'), ('goal', 'Goal Recommendation')], max_length=50)),
                ('recommendation_data', models.JSONField(default=dict)),
                ('confidence_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('is_shown', models.BooleanField(default=False)),
                ('is_accepted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], max_length=20)),
                ('height_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)])),
                ('current_weight_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(500)])),
                ('target_weight_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(500)])),
                ('activity_level', models.CharField(choices=[('sedentary', 'Sedentary (little or no exercise)'), ('lightly_active', 'Lightly Active (light exercise 1-3 days/week)'), ('moderately_active', 'Moderately Active (moderate exercise 3-5 days/week)'), ('very_active', 'Very Active (hard exercise 6-7 days/week)'), ('extremely_active', 'Extremely Active (very hard exercise, physical job)')], default='sedentary', max_length=20)),
                ('health_goals', models.JSONField(default=list, help_text='List of health goals')),
                ('dietary_restrictions', models.JSONField(default=list, help_text='List of dietary restrictions')),
                ('medical_conditions', models.JSONField(default=list, help_text='List of medical conditions')),
                ('allergies', models.JSONField(default=list, help_text='List of allergies')),
                ('preferred_meal_times', models.JSONField(default=dict, help_text='Preferred meal timing')),
                ('preferred_cuisines', models.JSONField(default=list, help_text='Preferred cuisines')),
                ('fitness_preferences', models.JSONField(default=list, help_text='Preferred fitness activities')),
                ('profile_visibility', models.CharField(choices=[('private', 'Private'), ('friends', 'Friends Only'), ('public', 'Public')], default='private', max_length=20)),
                ('data_sharing_consent', models.BooleanField(default=False)),
                ('marketing_consent', models.BooleanField(default=False)),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('si', 'Sinhala'), ('ta', 'Tamil')], default='en', max_length=5)),
                ('timezone', models.CharField(default='Asia/Colombo', max_length=50)),
                ('profile_completion_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
    ]
